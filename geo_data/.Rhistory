knitr::opts_chunk$set(echo = TRUE)
#install.packages("readxl")
library(readxl)
sheet_names = excel_sheets("../era5_data_2006_2020_thailand_monmean.xlsx")
knitr::opts_chunk$set(echo = TRUE)
#install.packages("readxl")
library(readxl)
sheet_names = excel_sheets("./era5_data_2006_2020_thailand_monmean.xlsx")
knitr::opts_chunk$set(echo = TRUE)
#install.packages("readxl")
library(readxl)
sheet_names = excel_sheets("../era5_data_2006_2020_thailand_monmean.xlsx")
#laden von den einzelnen sheets
T.huss.mon = read_excel("../era5_data_2006_2020_thailand_monmean.xlsx", sheet="era5_huss_2006_2020_thailand_mo")
T.tp.mon = read_excel("../era5_data_2006_2020_thailand_monmean.xlsx", sheet="era5_tp_2006_2020_thailand_monm")
T.t2m.mon = read_excel("../era5_data_2006_2020_thailand_monmean.xlsx", sheet="era5_t2m_2006_2020_thailand_mon")
#assuming that longitude and latitude data in climate data are the centroids
centroids = T.huss.mon[,2:4] #including the names of the province to join the data later
# downloading the geo data (borders of districts)
library(sf)
geography <- st_read("/Users/leamrowiec/Desktop/Datenanalyse SS23/other data/gadm36_THA_shp")
#install.packages("dplyr")
library(dplyr)
# zeilen der dataframe centroids nach der reihenfolge der Distrikte in geography ordnen
centroids.ordered <- arrange(centroids, ADM1_EN)
#aber: namen der distrikte sind nicht immer gleich -> hinzuf端gen einer Nummerierung der Dsitrikte, um gleiche spalte zu bekommen
centroids.ordered['numbers'] = c(1:77)
geography["numbers"] = c(1:77)
#install.packages("dplyr")
library(dplyr)
# Zeilen beider dataframes (centroids und geography) nach alphabetischer reihenfolge der provinzen ordnen
centroids.sorted = arrange(centroids, ADM1_EN) #geography ist schon nach dem alphabet geordnet
#namen der distrikte sind nicht immer gleich -> hinzuf端gen einer Nummerierung der Dsitrikte, um gleiche spalte zu bekommen
centroids.sorted['numbers'] = c(1:77)
geography["numbers"] = c(1:77)
# combining the two dataframes via the common column "numbers"
centroids.geography = merge(centroids.sorted, geography, by= "numbers")
# verview of data structure
class(centroids.geography)
head(centroids.geography)
summary(centroids.geography)
str(centroids.geography)
#install.packages("ggplot2")
library(ggplot2)
library(sf)
#install.packages("rgdal")
#install.packages("data.table")
library(rgdal)
library(data.table)
ggplot() +
geom_sf(data = centroids.geography, aes(geometry=geometry),col = "black", fill = NA) +  # adds geometric layer of polygons stored in the data object
geom_point(data = centroids.geography, aes(x = Longitude, y = Latitude)) # adds coordinate points
# plotting polygon data with ggplot2
# geography is dataframe with polygon data
class(geography)
# to plot the data we need a new dataframe combining geography data and relative humidity data
# 1. putting lines of dataframe T.huss.mon in alphabetical order of the province names
library(dplyr)
T.huss.mon.ordered = arrange(T.huss.mon, ADM1_EN)
# 2. changing numers in column "Number"
#T.huss.mon.ordered = subset(T.huss.mon.ordered, select = -Number)
T.huss.mon.ordered['numbers'] = c(1:77)
# geography["numbers"] = c(1:77); numbers have already been added
# using mean data of each province as a mean over all reported months
T.huss.mon.mean = apply(T.huss.mon.ordered[-c(1,2)], 1, mean)
T.huss.mon.mean.df = as.data.frame(T.huss.mon.mean)
# adding another column of numberst to merge the dataframes
T.huss.mon.mean.df['numbers'] = c(1:77)
# 3. merging the two dataframes of relative humidtiy and geography
huss.geography = merge(T.huss.mon.mean.df, geography, by= "numbers")
ggplot() +
geom_sf(data = huss.geography,aes(geometry = geometry, fill= T.huss.mon.mean), main= "mean temperature of each province") +
coord_sf() +
theme_minimal() +
labs(title = "mean relative humidity")
# using max data of each province as a mean over all reported months
T.huss.mon.max = apply(T.huss.mon.ordered[-c(1,2)], 1, max)
T.huss.mon.max.df = as.data.frame(T.huss.mon.max)
# adding another column of numberst to merge the dataframes
T.huss.mon.max.df['numbers'] = c(1:77)
# merging the two dataframes of relative humidtiy and geography
huss.geography.max = merge(T.huss.mon.max.df, geography, by= "numbers")
# removing non-necessary colums of huss.geography.max
huss.geography.max.rmv = huss.geography.max[-c(3,4),]
# umbenennen der Spalte "T.huss.mon.max" in der dataframe "huss.geography.max.rmv"
huss.goegraphy.max.rmv.1=rename(huss.geography.max.rmv, mon.max= T.huss.mon.max)
# only plotting the map
ggplot(huss.goegraphy.max.rmv.1, aes(geometry = geometry)) +geom_sf()
#
install.packages("colorspace")
library(colorspace)
library(ggplot2)
ggplot(huss.goegraphy.max.rmv.1, aes(geometry=geometry)) +
geom_sf (aes(fill = mon.max)) +
colorspace::scale_fill_continuous_sequential(palette= "viridis")
install.packages("colorspace")
install.packages("colorspace")
knitr::opts_chunk$set(echo = TRUE)
# using max data of each province as a mean over all reported months
T.huss.mon.max = apply(T.huss.mon.ordered[-c(1,2)], 1, max)
T.huss.mon.max.df = as.data.frame(T.huss.mon.max)
# adding another column of numberst to merge the dataframes
T.huss.mon.max.df['numbers'] = c(1:77)
# merging the two dataframes of relative humidtiy and geography
huss.geography.max = merge(T.huss.mon.max.df, geography, by= "numbers")
# removing non-necessary colums of huss.geography.max
huss.geography.max.rmv = huss.geography.max[-c(3,4),]
# umbenennen der Spalte "T.huss.mon.max" in der dataframe "huss.geography.max.rmv"
huss.goegraphy.max.rmv.1=rename(huss.geography.max.rmv, mon.max= T.huss.mon.max)
#install.packages("readxl")
library(readxl)
sheet_names = excel_sheets("../era5_data_2006_2020_thailand_monmean.xlsx")
#laden von den einzelnen sheets
T.huss.mon = read_excel("../era5_data_2006_2020_thailand_monmean.xlsx", sheet="era5_huss_2006_2020_thailand_mo")
T.tp.mon = read_excel("../era5_data_2006_2020_thailand_monmean.xlsx", sheet="era5_tp_2006_2020_thailand_monm")
T.t2m.mon = read_excel("../era5_data_2006_2020_thailand_monmean.xlsx", sheet="era5_t2m_2006_2020_thailand_mon")
#assuming that longitude and latitude data in climate data are the centroids
centroids = T.huss.mon[,2:4] #including the names of the province to join the data later
# downloading the geo data (borders of districts)
library(sf)
geography <- st_read("/Users/leamrowiec/Desktop/Datenanalyse SS23/other data/gadm36_THA_shp")
knitr::opts_chunk$set(echo = TRUE)
#install.packages("readxl")
library(readxl)
sheet_names = excel_sheets("../era5_data_2006_2020_thailand_monmean.xlsx")
#laden von den einzelnen sheets
T.huss.mon = read_excel("../era5_data_2006_2020_thailand_monmean.xlsx", sheet="era5_huss_2006_2020_thailand_mo")
T.tp.mon = read_excel("../era5_data_2006_2020_thailand_monmean.xlsx", sheet="era5_tp_2006_2020_thailand_monm")
T.t2m.mon = read_excel("../era5_data_2006_2020_thailand_monmean.xlsx", sheet="era5_t2m_2006_2020_thailand_mon")
#assuming that longitude and latitude data in climate data are the centroids
centroids = T.huss.mon[,2:4] #including the names of the province to join the data later
# downloading the geo data (borders of districts)
library(sf)
geography <- st_read("/Users/leamrowiec/Desktop/Datenanalyse SS23/other data/gadm36_THA_shp")
#install.packages("dplyr")
library(dplyr)
# zeilen der dataframe centroids nach der reihenfolge der Distrikte in geography ordnen
centroids.ordered <- arrange(centroids, ADM1_EN)
#aber: namen der distrikte sind nicht immer gleich -> hinzuf端gen einer Nummerierung der Dsitrikte, um gleiche spalte zu bekommen
centroids.ordered['numbers'] = c(1:77)
geography["numbers"] = c(1:77)
#install.packages("dplyr")
library(dplyr)
# Zeilen beider dataframes (centroids und geography) nach alphabetischer reihenfolge der provinzen ordnen
centroids.sorted = arrange(centroids, ADM1_EN) #geography ist schon nach dem alphabet geordnet
#namen der distrikte sind nicht immer gleich -> hinzuf端gen einer Nummerierung der Dsitrikte, um gleiche spalte zu bekommen
centroids.sorted['numbers'] = c(1:77)
geography["numbers"] = c(1:77)
# combining the two dataframes via the common column "numbers"
centroids.geography = merge(centroids.sorted, geography, by= "numbers")
# verview of data structure
class(centroids.geography)
head(centroids.geography)
summary(centroids.geography)
str(centroids.geography)
#install.packages("ggplot2")
library(ggplot2)
library(sf)
#install.packages("rgdal")
#install.packages("data.table")
library(rgdal)
library(data.table)
ggplot() +
geom_sf(data = centroids.geography, aes(geometry=geometry),col = "black", fill = NA) +  # adds geometric layer of polygons stored in the data object
geom_point(data = centroids.geography, aes(x = Longitude, y = Latitude)) # adds coordinate points
# plotting polygon data with ggplot2
# geography is dataframe with polygon data
class(geography)
# to plot the data we need a new dataframe combining geography data and relative humidity data
# 1. putting lines of dataframe T.huss.mon in alphabetical order of the province names
library(dplyr)
T.huss.mon.ordered = arrange(T.huss.mon, ADM1_EN)
# 2. changing numers in column "Number"
#T.huss.mon.ordered = subset(T.huss.mon.ordered, select = -Number)
T.huss.mon.ordered['numbers'] = c(1:77)
# geography["numbers"] = c(1:77); numbers have already been added
# using mean data of each province as a mean over all reported months
T.huss.mon.mean = apply(T.huss.mon.ordered[-c(1,2)], 1, mean)
T.huss.mon.mean.df = as.data.frame(T.huss.mon.mean)
# adding another column of numberst to merge the dataframes
T.huss.mon.mean.df['numbers'] = c(1:77)
# 3. merging the two dataframes of relative humidtiy and geography
huss.geography = merge(T.huss.mon.mean.df, geography, by= "numbers")
ggplot() +
geom_sf(data = huss.geography,aes(geometry = geometry, fill= T.huss.mon.mean), main= "mean temperature of each province") +
coord_sf() +
theme_minimal() +
labs(title = "mean relative humidity")
# using max data of each province as a mean over all reported months
T.huss.mon.max = apply(T.huss.mon.ordered[-c(1,2)], 1, max)
T.huss.mon.max.df = as.data.frame(T.huss.mon.max)
# adding another column of numberst to merge the dataframes
T.huss.mon.max.df['numbers'] = c(1:77)
# merging the two dataframes of relative humidtiy and geography
huss.geography.max = merge(T.huss.mon.max.df, geography, by= "numbers")
# removing non-necessary colums of huss.geography.max
huss.geography.max.rmv = huss.geography.max[-c(3,4),]
# umbenennen der Spalte "T.huss.mon.max" in der dataframe "huss.geography.max.rmv"
huss.goegraphy.max.rmv.1=rename(huss.geography.max.rmv, mon.max= T.huss.mon.max)
# only plotting the map
ggplot(huss.goegraphy.max.rmv.1, aes(geometry = geometry)) +geom_sf()
#
install.packages("colorspace")
library(colorspace)
library(ggplot2)
ggplot(huss.goegraphy.max.rmv.1, aes(geometry=geometry)) +
geom_sf (aes(fill = mon.max)) +
colorspace::scale_fill_continuous_sequential(palette= "viridis")
# wieso geht es immernoch nicht? sieht aus, als ob es latitude plottet, obwohl nicht mehr im dataframe???
T.huss.mon.min = apply(T.huss.mon.ordered[-c(1,2)], 1, min)
T.huss.mon.min.df = as.data.frame(T.huss.mon.min)
# adding another column of numbers to merge the dataframes
T.huss.mon.min.df['numbers'] = c(1:77)
# 3. merging the two dataframes of relative humidtiy and geography
huss.geography.min = merge(T.huss.mon.min.df, geography, by= "numbers")
# umbenennen der Spalte "T.huss.mon.min" in der dataframe "huss.geography.min"
library(dplyr)
huss.goegraphy.min.1 = rename(huss.geography.min, mon.min= T.huss.mon.min)
library(viridis)
library(ggplot2)
ggplot(huss.goegraphy.min.1, aes(geometry=geometry)) +
geom_sf (aes(fill = mon.min)) +
colorspace::scale_fill_continuous_sequential(palette= "viridis")
install.packages("colorspace")
knitr::opts_chunk$set(echo = TRUE)
# wieso geht es immernoch nicht? sieht aus, als ob es latitude plottet, obwohl nicht mehr im dataframe???
print(huss.goegraphy.max.rmv.1)
T.huss.mon.min = apply(T.huss.mon.ordered[-c(1,2)], 1, min)
T.huss.mon.min.df = as.data.frame(T.huss.mon.min)
# adding another column of numbers to merge the dataframes
T.huss.mon.min.df['numbers'] = c(1:77)
# 3. merging the two dataframes of relative humidtiy and geography
huss.geography.min = merge(T.huss.mon.min.df, geography, by= "numbers")
# umbenennen der Spalte "T.huss.mon.min" in der dataframe "huss.geography.min"
library(dplyr)
huss.goegraphy.min.1 = rename(huss.geography.min, mon.min= T.huss.mon.min)
library(viridis)
library(ggplot2)
ggplot(huss.goegraphy.min.1, aes(geometry=geometry)) +
geom_sf (aes(fill = mon.min)) +
colorspace::scale_fill_continuous_sequential(palette= "viridis")
print(huss.geometry.min.1)
T.huss.mon.min = apply(T.huss.mon.ordered[-c(1,2)], 1, min)
T.huss.mon.min.df = as.data.frame(T.huss.mon.min)
# adding another column of numbers to merge the dataframes
T.huss.mon.min.df['numbers'] = c(1:77)
# 3. merging the two dataframes of relative humidtiy and geography
huss.geography.min = merge(T.huss.mon.min.df, geography, by= "numbers")
# umbenennen der Spalte "T.huss.mon.min" in der dataframe "huss.geography.min"
library(dplyr)
huss.goegraphy.min.1 = rename(huss.geography.min, mon.min= T.huss.mon.min)
library(viridis)
library(ggplot2)
ggplot(huss.goegraphy.min.1, aes(geometry=geometry)) +
geom_sf (aes(fill = mon.min)) +
colorspace::scale_fill_continuous_sequential(palette= "viridis")
print(huss.geometry.min.1)
T.huss.mon.median = apply(T.huss.mon.ordered[-c(1,2)], 1, median)
T.huss.mon.median.df = as.data.frame(T.huss.mon.median)
# adding another column of numbers to merge the dataframes
T.huss.mon.median.df['numbers'] = c(1:77)
# 3. merging the two dataframes of relative humidtiy and geography
huss.geography.median = merge(T.huss.mon.median.df, geography, by= "numbers")
# umbenennen der Spalte "T.huss.mon.min" in der dataframe "huss.geography.min"
library(dplyr)
huss.goegraphy.median.1 = rename(huss.geography.median, mon.median= T.huss.mon.median)
library(viridis)
library(ggplot2)
ggplot(huss.goegraphy.median.1, aes(geometry=geometry)) +
geom_sf (aes(fill = mon.median)) +
colorspace::scale_fill_continuous_sequential(palette= "viridis")
install.packages('anomalize')
install.packages("tidyverse")
library(anomalize) #tidy anomaly detectiom
install.packages('anomalize')
install.packages("tidyverse")
library(anomalize) #tidy anomaly detectiom
install.packages("anomalize")
#install.packages('devtools')
devtools::install_github("business-science/anomalize")
install.packages("devtools")
library(devtools)
devtools::install_github("business-science/anomalize")
