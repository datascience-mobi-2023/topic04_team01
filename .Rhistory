# Laden Sie das Paket "tidyverse" (sofern noch nicht installiert)
install.packages("tidyverse")
library(tidyverse)
# Finde den Durchschnitt der maximalen Temperatur für jede Stadt über alle Jahre hinweg
average_temps <- V.temp.m %>%
rowwise() %>%
summarise(max_avg_temp = mean(c_across(starts_with("20"))))
# Finde den Namen der Stadt mit der höchsten maximalen Durchschnittstemperatur
hottest_city <- average_temps %>%
slice_max(max_avg_temp) %>%
pull(rownames(V.temp.m))
# Laden Sie das Paket "tidyverse" (sofern noch nicht installiert)
install.packages("tidyverse")
library(tidyverse)
# Finde den Durchschnitt der maximalen Temperatur für jede Stadt über alle Jahre hinweg
average_temps <- V.temp.m %>%
rowwise() %>%
summarise(max_avg_temp = mean(c_across(starts_with("20"))))
# Finde den Namen der Stadt mit der höchsten maximalen Durchschnittstemperatur
hottest_city <- average_temps %>%
slice_max(max_avg_temp) %>%
pull(rowname)
install.packages("tidyverse")
# Laden Sie das Paket "tidyverse" (sofern noch nicht installiert)
install.packages("tidyverse")
library(tidyverse)
# Finde den Durchschnitt der maximalen Temperatur für jede Stadt über alle Jahre hinweg
average_temps <- V.temp.m %>%
rowwise() %>%
summarise(max_avg_temp = mean(c_across(starts_with("20"))))
# Finde den Namen der Stadt mit der höchsten maximalen Durchschnittstemperatur
hottest_city <- average_temps %>%
slice_max(max_avg_temp) %>%
pull(rowname)
install.packages("tidyverse")
max(V.temp.max[1:63,4:19])
str(V.temp.max)
V.temp.m = V.temp.max[1:63,4:19]
rownames(V.temp.max)
# Laden Sie das Paket "tidyverse" (sofern noch nicht installiert)
install.packages("tidyverse")
library(tidyverse)
# Finde den Durchschnitt der maximalen Temperatur für jede Stadt über alle Jahre hinweg
average_temps <- V.temp.m %>%
rowwise() %>%
summarise(max_avg_temp = mean(c_across(starts_with("20"))))
# Finde den Namen der Stadt mit der höchsten maximalen Durchschnittstemperatur
hottest_city <- average_temps %>%
slice_max(max_avg_temp) %>%
pull(rowname)
# Laden Sie das Paket "tidyverse" (sofern noch nicht installiert)
install.packages("tidyverse")
library(tidyverse)
# Finde den Durchschnitt der maximalen Temperatur für jede Stadt über alle Jahre hinweg
average_temps <- V.temp.m %>%
rowwise() %>%
summarise(max_avg_temp = mean(c_across(starts_with("20"))))
# Finde den Namen der Stadt mit der höchsten maximalen Durchschnittstemperatur
hottest_city <- average_temps %>%
slice_max(max_avg_temp) %>%
pull(rownames(V.temp.max))
# Finde den Durchschnitt der maximalen Temperatur für jede Stadt über alle Jahre hinweg
average_temps <- V.temp.m %>%
rowwise() %>%
summarise(max_avg_temp = mean(c_across(starts_with("20"))))
# Finde den Namen der Stadt mit der höchsten maximalen Durchschnittstemperatur
hottest_city <- average_temps %>%
slice_max(max_avg_temp) %>%
pull(rownames(V.temp.max))
# Finde den Namen der Stadt mit der höchsten maximalen Durchschnittstemperatur
hottest_city <- average_temps %>%
slice_max(max_avg_temp) %>%
pull(rowname(V.temp.m))
# Finde den Namen der Stadt mit der höchsten maximalen Durchschnittstemperatur
hottest_city <- average_temps %>%
slice_max(max_avg_temp) %>%
pull(rowname(average_temps))
average_temps
# Finde den Namen der Stadt mit der höchsten maximalen Durchschnittstemperatur
hottest_city <- average_temps %>%
slice_max(max_avg_temp) %>%
# Gib den Namen der Stadt aus
cat("Die Stadt mit den höchsten maximalen Durchschnittstemperaturen ist:", hottest_city)
# Finde den Namen der Stadt mit der höchsten maximalen Durchschnittstemperatur
hottest_city <- average_temps %>%
slice_max(max_avg_temp) %>%
pull(rowname)
# Finde den Namen der Stadt mit der höchsten maximalen Durchschnittstemperatur
hottest_city <- average_temps %>%
slice_max(max_avg_temp) %>%
pull(rowname)
slice_max(max_avg_temp)
# Finde den Namen der Stadt mit der höchsten maximalen Durchschnittstemperatur
hottest_city <- average_temps
max(hottest_city)
index(max(hottest_city))
get_loc(max(hottest_city))
print(max(hottest_city).index)
max(hottest_city)
max = max(hottest_city)
show(max)
print(hottest_city.index.get_loc("max"))
print(hottest_city.rows.get_loc("max"))
rownames(V.temp.max)
names = V.temp.max[,2]
names
names = V.temp.max[,2].rows
rownames(V.temp.max[,2])
rownames(V.temp.max[,2])
V.temp.max = V.temp.max.set_index(V.temp.max[,2])
V.temp.max =set_index(V.temp.max[,2])
V.temp.max = Vtm
knitr::opts_chunk$set(echo = TRUE)
# load libraries
library(sp)
# load libraries
library(sp)
# load libraries
library(sp)
# load libraries
library(sp)
# load libraries
library(sp)
library(sf)
library(terra)
library(raster)
library(ggplot2)
library(exactextractr)
# Load raster into R
hfi <- raster("../data/hfp_Index_2018/hfp2018.tif")
knitr::opts_chunk$set(echo = TRUE)
install.packages("httr")
library(httr)
github_link <- "https://github.com/datascience-mobi-2023/topic04_team01/blob/main/2006_dengue_extracted.xlsx"
response <- GET(github_link)
file_content <- content(response, "text/csv")
data <- read.csv(text = file_content)
file_content <- content(response, "text")
data <- read.csv(text = file_content)
if (status_code(response) == 200) {
# Extrahieren Sie den Inhalt der Datei
file_content <- content(response, as = "text")
# Verarbeiten Sie den Inhalt der Datei (z. B. lesen Sie ihn in ein DataFrame ein)
data <- read.csv(text = file_content)
# Führen Sie die gewünschten Analysen oder Operationen mit den Daten durch
# ...
} else {
# Wenn der Abruf fehlgeschlagen ist, geben Sie eine Fehlermeldung aus
stop("Fehler beim Abrufen der Datei von GitHub.")
}
response <- GET(github_link)
if (status_code(response) == 200) {
# Extrahieren Sie den Inhalt der Datei
file_content <- content(response, as = "text")
# Verarbeiten Sie den Inhalt der Datei (z. B. lesen Sie ihn in ein DataFrame ein)
data <- read.csv(text = file_content)
# Führen Sie die gewünschten Analysen oder Operationen mit den Daten durch
# ...
} else {
# Wenn der Abruf fehlgeschlagen ist, geben Sie eine Fehlermeldung aus
stop("Fehler beim Abrufen der Datei von GitHub.")
}
if (status_code(response) == 200) {
# Extrahieren Sie den Inhalt der Datei
file_content <- content(response, as = "text")
# Verarbeiten Sie den Inhalt der Datei (z. B. lesen Sie ihn in ein DataFrame ein)
data <- read.csv(text = file_content, quote = "")
# Führen Sie die gewünschten Analysen oder Operationen mit den Daten durch
# ...
} else {
# Wenn der Abruf fehlgeschlagen ist, geben Sie eine Fehlermeldung aus
stop("Fehler beim Abrufen der Datei von GitHub.")
}
View(dat)
View(dat)
View(data)
View(data)
View(data)
library(httr)
github_link <- "https://github.com/datascience-mobi-2023/topic04_team01/blob/main/2006_dengue_extracted.csv"
response <- GET(github_link)
if (status_code(response) == 200) {
# Extrahieren Sie den Inhalt der Datei
file_content <- content(response, as = "text")
# Verarbeiten Sie den Inhalt der Datei (z. B. lesen Sie ihn in ein DataFrame ein)
data <- read.csv(text = file_content, quote = "")
# Führen Sie die gewünschten Analysen oder Operationen mit den Daten durch
# ...
} else {
# Wenn der Abruf fehlgeschlagen ist, geben Sie eine Fehlermeldung aus
stop("Fehler beim Abrufen der Datei von GitHub.")
}
View(data)
View(data)
View(data)
View(data)
View(data)
# Installieren des readr-Pakets, falls es noch nicht installiert ist
install.packages("readr")
# Laden des readr-Pakets
library(readr)
# GitHub-Link zur Raw-Version der CSV-Datei
github_link <- "https://github.com/datascience-mobi-2023/topic04_team01/blob/main/2006_dengue_extracted.csv"
# Einlesen der CSV-Datei von GitHub
data <- read_csv(github_link)
# Anzeigen der eingelesenen Daten
print(data)
knitr::opts_chunk$set(echo = TRUE)
install.packages("httr")
library(httr) v
library(httr)
github_link <- "https://raw.githubusercontent.com/datascience-mobi-2023/topic04_team01/main/2006_dengue_extracted.csv"
response <- GET(github_link)
if (status_code(response) == 200) {
# Extrahieren Sie den Inhalt der Datei
file_content <- content(response, as = "text")
# Verarbeiten Sie den Inhalt der Datei (z. B. lesen Sie ihn in ein DataFrame ein)
data <- read.csv(text = file_content, quote = "")
# Führen Sie die gewünschten Analysen oder Operationen mit den Daten durch
# ...
} else {
# Wenn der Abruf fehlgeschlagen ist, geben Sie eine Fehlermeldung aus
stop("Fehler beim Abrufen der Datei von GitHub.")
}
View(dat)
View(dat)
View(data)
View(data)
# Installieren des readr-Pakets, falls es noch nicht installiert ist
install.packages("readr")
# Laden des readr-Pakets
library(readr)
# GitHub-Link zur Raw-Version der CSV-Datei
github_link <- "https://raw.githubusercontent.com/datascience-mobi-2023/topic04_team01/main/2006_dengue_extracted.csv"
# Einlesen der CSV-Datei von GitHub
data <- read_csv(github_link)
# Anzeigen der eingelesenen Daten
print(data)
knitr::opts_chunk$set(echo = TRUE)
# Installieren des readr-Pakets, falls es noch nicht installiert ist
install.packages("readr")
# Laden des readr-Pakets
library(readr)
# GitHub-Link zur Raw-Version der CSV-Datei
github_link <- "https://raw.githubusercontent.com/datascience-mobi-2023/topic04_team01/main/2006_dengue_extracted.csv"
# Einlesen der CSV-Datei von GitHub
data <- read_csv(github_link)
?read
# Anzeigen der eingelesenen Daten
print(data)
?read
?read_csv
knitr::opts_chunk$set(echo = TRUE)
library(exactextractr)
install.packages(sp)
install.packages(sf)
# load libraries
library(sp)
sp
# Benötigte Bibliothek installieren
install.packages("readxl")
# Benötigte Bibliothek laden
library(readxl)
# Relativer Pfad zur Excel-Datei
relative_path <- "topic4_team1/2006_dengue_data_converted.xlsx"
# Pfad zum Arbeitsverzeichnis setzen (wo die Excel-Datei liegt)
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
# Excel-Datei einlesen und als Dataframe speichern
data <- read_excel(relative_path)
# Benötigte Bibliothek installieren
install.packages("readxl")
# Benötigte Bibliothek laden
library(readxl)
# Relativer Pfad zur Excel-Datei
relative_path <- "topic4_team1/2006_dengue_extracted.xlsx"
# Pfad zum Arbeitsverzeichnis setzen (wo die Excel-Datei liegt)
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
# Excel-Datei einlesen und als Dataframe speichern
data <- read_excel(relative_path)
install.packages("readxl")
knitr::opts_chunk$set(echo = TRUE)
# Benötigte Bibliothek installieren
install.packages("readxl")
# Benötigte Bibliothek laden
library(readxl)
# Relativer Pfad zur Excel-Datei
relative_path <- "topic4_team1/2006_dengue_extracted.xlsx"
# Pfad zum Arbeitsverzeichnis setzen (wo die Excel-Datei liegt)
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
# Excel-Datei einlesen und als Dataframe speichern
data <- read_excel(relative_path)
# Benötigte Bibliothek installieren
install.packages("readxl")
# Benötigte Bibliothek laden
library(readxl)
# Relativer Pfad zur Excel-Datei
relative_path <- "topic04_team01/2006_dengue_extracted.xlsx"
# Pfad zum Arbeitsverzeichnis setzen (wo die Excel-Datei liegt)
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
# Excel-Datei einlesen und als Dataframe speichern
data <- read_excel(relative_path)
# Benötigte Bibliothek installieren
install.packages("readxl")
# Benötigte Bibliothek laden
library(readxl)
# Relativer Pfad zur Excel-Datei
relative_path <- "topic04_team01/2006_dengue_extracted.xlsx"
# Pfad zum Arbeitsverzeichnis setzen (wo die Excel-Datei liegt)
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
# Excel-Datei einlesen und als Dataframe speichern
data <- read_excel(relative_path)
# Benötigte Bibliothek installieren
install.packages("readxl")
# Benötigte Bibliothek laden
library(readxl)
# Relativer Pfad zur Excel-Datei
relative_path <- "./topic04_team01/2006_dengue_extracted.xlsx"
# Pfad zum Arbeitsverzeichnis setzen (wo die Excel-Datei liegt)
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
# Excel-Datei einlesen und als Dataframe speichern
data <- read_excel(relative_path)
install.packages("readxl")
knitr::opts_chunk$set(echo = TRUE)
# Benötigte Bibliothek installieren
install.packages("readxl")
# Benötigte Bibliothek laden
library(readxl)
# Relativer Pfad zur Excel-Datei
relative_path <- "./topic04_team01/2006_dengue_extracted.xlsx"
# Pfad zum Arbeitsverzeichnis setzen (wo die Excel-Datei liegt)
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
# Excel-Datei einlesen und als Dataframe speichern
data <- read_excel(relative_path)
# Benötigte Bibliothek installieren
install.packages("readxl")
# Benötigte Bibliothek laden
library(readxl)
# Relativer Pfad zur Excel-Datei
relative_path <- "./2006_dengue_extracted.xlsx"
# Pfad zum Arbeitsverzeichnis setzen (wo die Excel-Datei liegt)
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
# Excel-Datei einlesen und als Dataframe speichern
data <- read_excel(relative_path)
# Benötigte Bibliothek installieren
install.packages("readxl")
# Benötigte Bibliothek laden
library(readxl)
# Relativer Pfad zur Excel-Datei
relative_path <- "../2006_dengue_extracted.xlsx"
# Pfad zum Arbeitsverzeichnis setzen (wo die Excel-Datei liegt)
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
# Excel-Datei einlesen und als Dataframe speichern
data <- read_excel(relative_path)
# Benötigte Bibliothek installieren
install.packages("readxl")
# Benötigte Bibliothek laden
library(readxl)
# Relativer Pfad zur Excel-Datei
relative_path <- "../2006_dengue_extracted.xlsx"
# Pfad zum Arbeitsverzeichnis setzen (wo die Excel-Datei liegt)
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
# Excel-Datei einlesen und als Dataframe speichern
data <- read_excel(relative_path)
install.packages("readxl")
# Benötigte Bibliothek installieren
install.packages("readxl")
# Benötigte Bibliothek laden
library(readxl)
# Relativer Pfad zur Excel-Datei
relative_path <- "../2006_dengue_extracted.xlsx"
# Pfad zum Arbeitsverzeichnis setzen (wo die Excel-Datei liegt)
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
# Excel-Datei einlesen und als Dataframe speichern
data <- read_excel(relative_path)
install.packages("readxl")
# Excel-Datei einlesen und als Dataframe speichern
data <- read_excel(relative_path)
# Relativer Pfad zur Excel-Datei
relative_path <- "./topic04_team01/2006_dengue_extracted.xlsx"
# Pfad zum Arbeitsverzeichnis setzen (wo die Excel-Datei liegt)
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
# Excel-Datei einlesen und als Dataframe speichern
data <- read_excel(relative_path)
# Excel-Datei einlesen und als Dataframe speichern
data <- read_excel(relative_path)
# Benötigte Bibliothek installieren
install.packages("readxl")
# Benötigte Bibliothek laden
library(readxl)
# Relativer Pfad zur Excel-Datei
relative_path <- "/Users/noemitigrato/Desktop/topic04_team01/2006_dengue_extracted.xlsx"
# Pfad zum Arbeitsverzeichnis setzen (wo die Excel-Datei liegt)
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
# Excel-Datei einlesen und als Dataframe speichern
data <- read_excel(relative_path)
topic04_team01/2006_dengue_extracted.xlsx
# Benötigte Bibliothek installieren
install.packages("readxl")
# Benötigte Bibliothek laden
library(readxl)
# Relativer Pfad zur Excel-Datei
relative_path <- "/Users/noemitigrato/Desktop/topic04_team01/2006_dengue_extracted.xlsx"
# Pfad zum Arbeitsverzeichnis setzen (wo die Excel-Datei liegt)
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
# Excel-Datei einlesen und als Dataframe speichern
data <- read_excel(relative_path)
# Den eingelesenen Dataframe anzeigen
print(data)
# Benötigte Bibliothek installieren
install.packages("readxl")
# Benötigte Bibliothek laden
library(readxl)
# Relativer Pfad zur Excel-Datei
relative_path <- "/topic04_team01/2006_dengue_extracted.xlsx"
# Pfad zum Arbeitsverzeichnis setzen (wo die Excel-Datei liegt)
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
# Excel-Datei einlesen und als Dataframe speichern
data <- read_excel(relative_path)
# Benötigte Bibliothek installieren
install.packages("readxl")
# Benötigte Bibliothek laden
library(readxl)
# Relativer Pfad zur Excel-Datei
relative_path <- "./topic04_team01/2006_dengue_extracted.xlsx"
# Pfad zum Arbeitsverzeichnis setzen (wo die Excel-Datei liegt)
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
# Excel-Datei einlesen und als Dataframe speichern
data <- read_excel(relative_path)
# Benötigte Bibliothek installieren
install.packages("readxl")
# Benötigte Bibliothek laden
library(readxl)
# Relativer Pfad zur Excel-Datei
relative_path <- "./dengue data converted/2006_dengue_extracted.xlsx"
# Pfad zum Arbeitsverzeichnis setzen (wo die Excel-Datei liegt)
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
# Excel-Datei einlesen und als Dataframe speichern
data <- read_excel(relative_path)
# Benötigte Bibliothek installieren
install.packages("readxl")
# Benötigte Bibliothek laden
library(readxl)
# Relativer Pfad zur Excel-Datei
relative_path <- "/topic04_team01/dengue data converted/2006_dengue_extracted.xlsx"
# Pfad zum Arbeitsverzeichnis setzen (wo die Excel-Datei liegt)
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
# Excel-Datei einlesen und als Dataframe speichern
data <- read_excel(relative_path)
# Benötigte Bibliothek installieren
install.packages("readxl")
# Benötigte Bibliothek laden
library(readxl)
# Relativer Pfad zur Excel-Datei
relative_path <- "./topic04_team01/dengue data converted/2006_dengue_extracted.xlsx"
# Pfad zum Arbeitsverzeichnis setzen (wo die Excel-Datei liegt)
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
# Excel-Datei einlesen und als Dataframe speichern
data <- read_excel(relative_path)
# Benötigte Bibliothek installieren
install.packages("readxl")
# Benötigte Bibliothek laden
library(readxl)
# Relativer Pfad zur Excel-Datei
relative_path <- "./2006_dengue_extracted.xlsx"
# Pfad zum Arbeitsverzeichnis setzen (wo die Excel-Datei liegt)
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
# Excel-Datei einlesen und als Dataframe speichern
data <- read_excel(relative_path)
# Benötigte Bibliothek installieren
install.packages("readxl")
# Benötigte Bibliothek laden
library(readxl)
# Relativer Pfad zur Excel-Datei
relative_path <- "./2006_dengue_extracted.xlsx"
# Pfad zum Arbeitsverzeichnis setzen (wo die Excel-Datei liegt)
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
# Excel-Datei einlesen und als Dataframe speichern
data <- read_excel(relative_path)
# Benötigte Bibliothek installieren
install.packages("readxl")
# Benötigte Bibliothek laden
library(readxl)
# Relativer Pfad zur Excel-Datei
relative_path <- "./2006_dengue_extracted.xlsx"
# Pfad zum Arbeitsverzeichnis setzen (wo die Excel-Datei liegt)
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
# Excel-Datei einlesen und als Dataframe speichern
data <- read_excel(relative_path)
install.packages("readxl")
Dengue data als dataframe 2006 - 2020 einlesen:
# Benötigte Bibliothek installieren
install.packages("readxl")
# Benötigte Bibliothek laden
library(readxl)
# Relativer Pfad zur Excel-Datei
path2006 <- "./dengue data converted /2006_dengue_extracted.xlsx"
path2007 <- "./dengue data converted /2007_dengue_extracted.xlsx"
# Pfad zum Arbeitsverzeichnis setzen (wo die Excel-Datei liegt)
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
# Excel-Datei einlesen und als Dataframe speichern
dengue2006 <- read_excel(path2006)
# Benötigte Bibliothek installieren
install.packages("readxl")
# Benötigte Bibliothek laden
library(readxl)
# Relativer Pfad zur Excel-Datei
path2006 <- "./dengue data converted /2006_dengue_extracted.xlsx"
path2007 <- "./dengue data converted /2007_dengue_extracted.xlsx"
# Pfad zum Arbeitsverzeichnis setzen (wo die Excel-Datei liegt)
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
# Excel-Datei einlesen und als Dataframe speichern
dengue2006 <- read_excel(path2006)
